// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Collection {
  id              String   @id @default(cuid())
  name            String
  description     String?
  logoImageUrl    String
  featureImageUrl String?
  bannerImageUrl  String?
  blockChainId    String?  @default("Ethereum")
  explicitContent Boolean? @default(false)
  displayThemee   String?  @default("contained")
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  published       Boolean  @default(false)
  visible         Boolean  @default(true)
  verified        Boolean  @default(false)
  tokenAddress    String?  @default("")

  nftSets NFTSet[]
  user    User     @relation(fields: [userId], references: [id])

  @@index([visible], type: BTree)
}

model NFTSet {
  id           String             @id @default(cuid())
  name         String
  imageUrl     String
  blockchainId String
  link         String?
  description  String?
  collectionId String?
  creatorId    String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  views        String[]           @default([])
  likes        String[]           @default([])
  nftEditions  NFTEdition[]
  properties   NFTSetProperties[]
  history      NFTSetHistory[]
  creator      User               @relation(fields: [creatorId], references: [id])
  collection   Collection?        @relation(fields: [collectionId], references: [id])
}

model NFTSetProperties {
  id        String   @id @default(cuid())
  type      String
  name      String
  nftSetId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nftSet NFTSet @relation(fields: [nftSetId], references: [id])
}

model NFTSetHistory {
  id              String     @id @default(cuid())
  eventType       String
  price           Float
  currency        String
  quantity        Int
  nftSetId        String
  fromAdminWallet Boolean
  walletFromId    String?
  walletToId      String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  nftSet          NFTSet     @relation(fields: [nftSetId], references: [id])
  walletFrom      Wallet?    @relation(fields: [walletFromId], references: [id], name: "WalletFrom")
  walletTo        Wallet     @relation(fields: [walletToId], references: [id], name: "WalletTo")
}

model NFTEdition {
  id            String   @id @default(cuid())
  minted        Boolean
  ownerId       String
  nftSetId      String
  tokenAddress  String?
  adminWalletId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  lots        Lot[]
  adminWallet AdminWallet? @relation(fields: [adminWalletId], references: [id])
  owner       Wallet       @relation(fields: [ownerId], references: [id])
  nftSet      NFTSet       @relation(fields: [nftSetId], references: [id])
}

model Lot {
  id           String   @id @default(cuid())
  reservePrice Decimal
  sold         Boolean
  views        Int      @default(0)
  nftEditionId String
  auctionId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  nftEdition NFTEdition @relation(fields: [nftEditionId], references: [id])
  auction    Auction    @relation(fields: [auctionId], references: [id])

  @@unique([id], name: "lot_constraint")
}

model Auction {
  id        String   @id @default(cuid())
  fixed     Boolean
  start     DateTime
  end       DateTime
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lots Lot[]
  user User  @relation(fields: [userId], references: [id])
}

model Wallet {
  id        String   @id @default(cuid())
  virtual   Boolean
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transfersFrom NFTSetHistory[] @relation("WalletFrom")
  transfersTo   NFTSetHistory[] @relation("WalletTo")
  nftEditions   NFTEdition[]
  adminWallet   AdminWallet?
  user          User         @relation(fields: [userId], references: [id])
}

model AdminWallet {
  id           String   @id @default(cuid())
  userWalletId String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  nftEditions NFTEdition[]
  userWallet  Wallet       @relation(fields: [userWalletId], references: [id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  liked         String[]  @default([])

  wallets     Wallet[]
  auctions    Auction[]
  accounts    Account[]
  sessions    Session[]
  collections Collection[]
  nftSets     NFTSet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
