// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Collection {
  id            String @id @default(cuid())
  name          String
  description   String
  userId        String
  color         String?
  user          User   @relation(fields: [userId], references: [id])
  nftSets       NFTSet[]
}

model NFTSet {
  id            String @id @default(cuid())
  collectionId  String
  collection    Collection @relation(fields: [collectionId], references: [id])
  nftEditions   NFTEdition[]
}

model NFTEdition {
  id            String     @id @default(cuid())
  name          String
  minted        Boolean
  url           String
  blockchainId  String
  tokenAddress  String?
  nftSetId      String
  nftSet        NFTSet     @relation(fields: [nftSetId], references: [id])
  ownerId       String
  owner         Wallet     @relation(fields: [ownerId], references: [id])
  lots          Lot[]
  adminWalletId String?
  adminWallet   AdminWallet? @relation(fields: [adminWalletId], references: [id])
}

model Lot {
  id           String     @id @default(cuid())
  reservePrice Decimal
  sold         Boolean
  nftEditionId String    
  nftEdition   NFTEdition @relation(fields: [nftEditionId], references: [id])
  auctionId    String
  auction      Auction    @relation(fields: [auctionId], references: [id])
}

model Auction {
  id          String     @id @default(cuid())
  fixed       Boolean
  start       DateTime
  end         DateTime
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  lots        Lot[]
}

model Wallet {
  id          String          @id @default(cuid())
  virtual     Boolean
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  nftEditions NFTEdition[]
  adminWallet AdminWallet?
}

model AdminWallet {
  id            String        @id @default(cuid())
  nftEditions   NFTEdition[]
  userWalletId  String        @unique
  userWallet    Wallet        @relation(fields: [userWalletId], references: [id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  wallets       Wallet[]
  auctions      Auction[]
  accounts      Account[]
  sessions      Session[]
  collections   Collection[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
