generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id              String   @id @default(cuid())
  name            String
  description     String?
  userId          String
  bannerImageUrl  String?
  blockChainId    String?  @default("Ethereum")
  displayThemee   String?  @default("contained")
  explicitContent Boolean? @default(false)
  featureImageUrl String?
  logoImageUrl    String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  published       Boolean  @default(false)
  visible         Boolean  @default(true)
  verified        Boolean  @default(false)
  tokenAddress    String?  @default("")
  frozen          Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id])
  nftSets         NFTSet[]

  @@index([visible])
}

model NFTSet {
  id           String             @id @default(cuid())
  collectionId String?
  name         String
  blockchainId String
  description  String?
  imageUrl     String
  link         String?
  creatorId    String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  likes        String[]           @default([])
  views        String[]           @default([])
  collection   Collection?        @relation(fields: [collectionId], references: [id])
  creator      User               @relation(fields: [creatorId], references: [id])
  nftEditions  NFTEdition[]
  history      NFTSetHistory[]
  properties   NFTSetProperties[]
}

model NFTSetProperties {
  id        String   @id @default(cuid())
  type      String
  name      String
  nftSetId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nftSet    NFTSet   @relation(fields: [nftSetId], references: [id])
}

model NFTSetHistory {
  id              String   @id @default(cuid())
  eventType       String
  price           Float
  currency        String
  quantity        Int
  walletFromId    String?
  walletToId      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  fromAdminWallet Boolean
  nftSetId        String
  nftSet          NFTSet   @relation(fields: [nftSetId], references: [id])
  walletFrom      Wallet?  @relation("WalletFrom", fields: [walletFromId], references: [id])
  walletTo        Wallet   @relation("WalletTo", fields: [walletToId], references: [id])
}

model NFTEdition {
  id            String       @id @default(cuid())
  minted        Boolean
  tokenAddress  String?
  nftSetId      String
  ownerId       String
  adminWalletId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  adminWallet   AdminWallet? @relation(fields: [adminWalletId], references: [id])
  nftSet        NFTSet       @relation(fields: [nftSetId], references: [id])
  owner         Wallet       @relation(fields: [ownerId], references: [id])
  lots          Lot[]
}

model Lot {
  id           String     @id @unique @default(cuid())
  reservePrice Decimal
  sold         Boolean
  views        Int        @default(0)
  nftEditionId String
  auctionId    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  auction      Auction    @relation(fields: [auctionId], references: [id])
  nftEdition   NFTEdition @relation(fields: [nftEditionId], references: [id])
}

model Auction {
  id        String   @id @default(cuid())
  fixed     Boolean
  start     DateTime
  end       DateTime
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  lots      Lot[]
}

model Wallet {
  id            String          @id @default(cuid())
  virtual       Boolean
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  address       String?
  mnemonic      String?
  privateKey    String?
  user          User            @relation(fields: [userId], references: [id])
  adminWallet   AdminWallet?
  nftEditions   NFTEdition[]
  transfersFrom NFTSetHistory[] @relation("WalletFrom")
  transfersTo   NFTSetHistory[] @relation("WalletTo")
}

model AdminWallet {
  id           String       @id @default(cuid())
  userWalletId String       @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userWallet   Wallet       @relation(fields: [userWalletId], references: [id])
  nftEditions  NFTEdition[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  liked         String[]     @default([])
  avatar        String?
  accounts      Account[]
  auctions      Auction[]
  collections   Collection[]
  nftSets       NFTSet[]
  sessions      Session[]
  wallets       Wallet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
